# pylint: skip-file
"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class multipart_msg_t(object):
    __slots__ = ["id", "total_size", "channel", "chunk_index", "chunk_count", "chunk_size", "chunk_data"]

    def __init__(self,
                 id=0,
                 total_size=0,
                 channel="",
                 chunk_index=0,
                 chunk_count=0,
                 chunk_size=0,
                 chunk_data=None,
                 _skip_initialize=False):
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize: return
        # TODO(matt): make this smaller and deal with wrapping.
        self.id = id
        self.total_size = total_size
        self.channel = channel
        self.chunk_index = chunk_index
        self.chunk_count = chunk_count
        self.chunk_size = chunk_size
        self.chunk_data = "" if chunk_data is None else chunk_data

    @staticmethod
    def _skytype_meta():
        return dict(
            type='struct',
            package='skybridge',
            name='multipart_msg_t',
        )

    @classmethod
    def _default(cls):
        return cls()

    def __repr__(self):
        return 'lcmtypes.skybridge.multipart_msg_t({})'.format(
            ', '.join('{}={}'.format(name, repr(getattr(self, name))) for name in self.__slots__))

    def encode(self):
        buf = BytesIO()
        buf.write(multipart_msg_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.id, self.total_size))
        __channel_encoded = self.channel.encode('utf-8')
        buf.write(struct.pack('>I', len(__channel_encoded)+1))
        buf.write(__channel_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bbi", self.chunk_index, self.chunk_count, self.chunk_size))
        buf.write(bytearray(self.chunk_data[:self.chunk_size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != multipart_msg_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return multipart_msg_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = multipart_msg_t(_skip_initialize=True)
        self.id, self.total_size = struct.unpack(">ii", buf.read(8))
        __channel_len = struct.unpack('>I', buf.read(4))[0]
        self.channel = buf.read(__channel_len)[:-1].decode('utf-8', 'replace')
        self.chunk_index, self.chunk_count, self.chunk_size = struct.unpack(">bbi", buf.read(6))
        self.chunk_data = buf.read(self.chunk_size)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if multipart_msg_t in parents: return 0
        tmphash = (0x7cb65caa4d5d6c99) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if multipart_msg_t._packed_fingerprint is None:
            multipart_msg_t._packed_fingerprint = struct.pack(">Q", multipart_msg_t._get_hash_recursive([]))
        return multipart_msg_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)