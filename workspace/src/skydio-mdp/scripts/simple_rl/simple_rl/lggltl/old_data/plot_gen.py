import sys
import numpy as np
from matplotlib import pyplot as plt

'''
For generalization experiments, training samples varied between 300-3000
'''

MODE = int(sys.argv[1])
lcolors = ['b', 'g', 'r']
color_ls = [[240, 163, 255], [113, 113, 198], [197, 193, 170],
            [113, 198, 113], [85, 85, 85], [198, 113, 113],
            [142, 56, 142], [125, 158, 192], [184, 221, 255],
            [153, 63, 0], [142, 142, 56], [56, 142, 142]]

markers = ['o', 's', 'D', '^', '*', '+', 'p', 'x', 'v', '|']
colors = [[shade / 255.0 for shade in rgb] for rgb in color_ls]


if MODE == 0:
    x_vals = [4, 8, 12, 16, 20, 24, 28, 32, 36]
else:
    x_vals = np.array(range(1, 10)) * 0.1

gen_data_s_ed = [[0.0, 0.000385505011565, 0.0, 0.0364055299539, 0.010752688172, 0.264328485885, 0.0637254901961, 0.489090909091, 0.106463878327],
                 [0.0, 0.0, 0.0, 0.00409836065574, 0.0400471142521, 0.322072072072, 0.182302771855, 0.26953125, 0.269320843091],
                 [0.0, 0.000346860908776, 0.000402090872537, 0.00283822138127, 0.000493583415597, 0.305172413793, 0.294832826748, 0.328, 0.713947990544],
                 [0.0, 0.000745156482861, 0.00436681222707, 0.000435161009574, 0.0620567375887, 0.289767841788, 0.0998735777497, 0.496688741722, 0.560344827586],
                 [0.0, 0.000796178343949, 0.0457851946941, 0.000475963826749, 0.0698181818182, 0.0454201362604, 0.098104793757, 0.81124497992, 0.565957446809],
                 [0.0, 0.0, 0.00141043723554, 0.0674273858921, 0.184810126582, 0.276981132075, 0.303433001107, 0.145584725537, 0.487012987013],
                 [0.0, 0.0, 0.0, 0.00239808153477, 0.0632411067194, 0.0941666666667, 0.176024279211, 0.0814249363868, 0.0],
                 [0.0, 0.0, 0.0, 0.0507889546351, 0.0346184107002, 0.0554339897885, 0.197829716194, 0.416, 0.599206349206],
                 [0.0, 0.0, 0.0120036934441, 0.0130684788291, 0.185802469136, 0.136310223267, 0.0293132328308, 0.191729323308, 0.744897959184],
                 [0.0, 0.0, 0.00748713149275, 0.0218068535826, 0.0, 0.0487603305785, 0.231808731809, 0.597194388778, 0.155672823219]]

gen_data_sba_ed = [[0.0, 0.0, 0.0437367303609, 0.0752136752137, 0.0271099744246, 0.132271468144, 0.528521536671, 0.47263681592, 0.632707774799],
                   [0.0, 0.0208172706245, 0.0187416331995, 0.0271889400922, 0.0477150537634, 0.455945252352, 0.062091503268, 0.285454545455, 0.209125475285],
                   [0.0, 0.00104058272633, 0.0301568154403, 0.0122989593188, 0.0123395853899, 0.250862068966, 0.23201621074, 0.4688, 0.475177304965],
                   [0.0, 0.000402090872537, 0.0046904315197, 0.11552928533, 0.0546031746032, 0.0984360625575, 0.256157635468, 0.359932088285, 0.705570291777],
                   [0.0, 0.0227429359063, 0.00116867939229, 0.0606557377049, 0.0512367491166, 0.0780780780781, 0.00533049040512, 0.310546875, 0.353629976581],
                   [0.0, 0.0, 0.035780669145, 0.00501672240803, 0.0469135802469, 0.0890099909173, 0.122941822173, 0.227672955975, 0.446886446886],
                   [0.0, 0.00510018214936, 0.00512342803912, 0.0678241996744, 0.147465437788, 0.0849724626279, 0.238687782805, 0.066384180791, 0.346534653465],
                   [0.0, 0.0103868194842, 0.0, 0.0935987089833, 0.0543147208122, 0.164915966387, 0.359865470852, 0.0394511149228, 0.465940054496],
                   [0.0, 0.00150037509377, 0.00209467951403, 0.0399002493766, 0.053015241882, 0.115023474178, 0.419491525424, 0.125226860254, 0.304794520548],
                   [0.0, 0.0153491941673, 0.0268487988695, 0.021770682148, 0.0635641316686, 0.10843373494, 0.350739773716, 0.456730769231, 0.372727272727]]

gen_data_seaa_ed = [[0.0, 0.013094417643, 0.00116867939229, 0.0352459016393, 0.183745583039, 0.207207207207, 0.240938166311, 0.576171875, 0.908665105386],
                    [0.0, 0.000346860908776, 0.0188982710092, 0.0364238410596, 0.030602171767, 0.154310344828, 0.22695035461, 0.4176, 0.827423167849],
                    [0.0, 0.00848111025443, 0.0169567157519, 0.0963133640553, 0.0477150537634, 0.256629597947, 0.112745098039, 0.701818181818, 0.45247148289],
                    [0.000686813186813, 0.00784167289022, 0.0270860637833, 0.0293778801843, 0.185269121813, 0.123947972456, 0.308401639344, 0.233979135618, 0.466183574879],
                    [0.0, 0.00120627261761, 0.0393996247655, 0.0757657173563, 0.112380952381, 0.23735050598, 0.121921182266, 0.69779286927, 0.822281167109],
                    [0.0, 0.00312989045383, 0.0288104089219, 0.0228539576366, 0.367283950617, 0.227974568574, 0.339187705818, 0.550943396226, 0.421245421245],
                    [0.0, 0.00143266475645, 0.0, 0.181818181818, 0.0837563451777, 0.116596638655, 0.336322869955, 0.327615780446, 0.41416893733],
                    [0.0, 0.0, 0.00502723083368, 0.0513715710723, 0.053015241882, 0.235915492958, 0.578389830508, 0.252268602541, 0.328767123288],
                    [0.0, 0.0175111773472, 0.0262008733624, 0.0469973890339, 0.089243498818, 0.30524505589, 0.201011378003, 0.746688741722, 0.574712643678],
                    [0.0, 0.00844205679202, 0.105982100801, 0.00919206579584, 0.135641316686, 0.1875, 0.381201044386, 0.791666666667, 0.609090909091]]

gen_data_ca_ed = [[0.0, 0.0, 0.0340248962656, 0.0562625586068, 0.00177619893428, 0.242527754056, 0.418657565415, 0.475431606906, 0.401360544218]]

# 0.0, 0.0, 0.00603188280913, 0.0527220630372, 0.0786736020806, 0.0381679389313, 0.241293532338, 0.151057401813, 0.539170506912

data = [('Seq2Seq', gen_data_s_ed), ('Seq2Seq + BA', gen_data_sba_ed), ('Seq2Seq + EAA', gen_data_seaa_ed)]
data = [(x, np.transpose(np.array(y))) for x, y in data]
print map(lambda x: x[1].shape, data)

plt.rcParams['legend.loc'] = 'best'
num_samples = data[0][1].shape[-1]
print 'Data collected over {0} trials'.format(num_samples)
count = 0
for n, d in data:
    means = np.mean(d, axis=-1)
    stds = np.std(d, axis=-1)
    print means
    plt.errorbar(x_vals, means, yerr=stds * (1.96 / np.sqrt(num_samples)), fmt=lcolors[count] + 'o-', ecolor=lcolors[count], capsize=2, label=n)
    count += 1


plt.legend()

if MODE == 0:
    plt.xlim(0, 40)
else:
    plt.xlim(0.0, 1.0)

plt.ylim(0.0, 0.8)

if MODE == 0:
    plt.xlabel('# of GLTL Formulas Seen During Training')
    plt.ylabel('Unseen GLTL Formula Grounding Accuracy')
else:

    plt.xlabel('% of Training Data Utilized')
    plt.ylabel('Held-Out Data Grounding Accuracy')
plt.grid(True)
plt.show()
